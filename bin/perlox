#!/usr/bin/perl

use v5.24;
use strict;
use warnings;
use utf8::all;
use lib::abs '../lib/';

use Syntax::Keyword::Match;
use Readonly qw(Readonly);
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);

use Perlox::Interpreter ();
use Perlox::CLI qw(show_version);

Readonly::Hash my %EXIT_CODES => (
    OK => 0,
    TOO_MANY_ARGUMENTS => 64,
);

# Without this line colored output won't work correctly:
# Term::ReadLine bypasses the STDOUT (it works with the /dev/tty directly or so) when prompting a user
# for input ($term->readline), so the color('reset') output stays in the buffer longer than needed,
# which leads to coloring the wrong lines.
local $| = 1;

my %cli_arguments = (
    show_help => 0,
    show_version => 0,
    verbose => 0,
);
GetOptions(
    'help|h' => \$cli_arguments{show_help},
    'verbose' => \$cli_arguments{verbose},
    'version|V' => \$cli_arguments{show_version},
) or pod2usage(2);
pod2usage(1) if $cli_arguments{show_help};
if ($cli_arguments{show_version}) {
    show_version($Perlox::Interpreter::VERSION);
    exit($EXIT_CODES{OK});
}

my $interpreter = Perlox::Interpreter->new(
    verbose => $cli_arguments{verbose},
);

match (scalar(@ARGV) : ==) {
    case (0) {
        $interpreter->run_repl();
    } case (1) {
        $interpreter->run_from_file($ARGV[0]);
    } default {
        pod2usage(1);
        exit($EXIT_CODES{TOO_MANY_ARGUMENTS});
    }
}

1;

__END__

=encoding utf8
=head1 NAME

perlox - Lox language implementation written in Perl5.

=head1 SYNOPSIS

perlox [options] [script_file]

=head1 OPTIONS

    --help|-h - show the brief help page
    --verbose - show verbose debug output for scanner/parser stages
    --version|-V - show the version of the Perlox
